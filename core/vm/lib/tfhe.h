// Copyright Â© 2023 ZAMA.
// All rights reserved.

#ifndef TFHE_RS_C_API_H
#define TFHE_RS_C_API_H

// Warning, this file is autogenerated by cbindgen. Do not modify this manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


#define BOOLEAN_PARAMETERS_SET_DEFAULT_PARAMETERS 0

#define BOOLEAN_PARAMETERS_SET_TFHE_LIB_PARAMETERS 1

#define SHORTINT_NATIVE_MODULUS 0

typedef enum ShortintCiphertextKind {
  ShortintCiphertextBig,
  ShortintCiphertextSmall,
} ShortintCiphertextKind;

typedef enum ShortintPublicKeyKind {
  ShortintPublicKeyBig,
  ShortintPublicKeySmall,
} ShortintPublicKeyKind;

typedef struct BooleanCiphertext BooleanCiphertext;

typedef struct BooleanClientKey BooleanClientKey;

typedef struct BooleanCompressedCiphertext BooleanCompressedCiphertext;

typedef struct BooleanCompressedServerKey BooleanCompressedServerKey;

typedef struct BooleanParameters BooleanParameters;

typedef struct BooleanParametersSet BooleanParametersSet;

typedef struct BooleanPublicKey BooleanPublicKey;

typedef struct BooleanServerKey BooleanServerKey;

typedef struct ClientKey ClientKey;

typedef struct CompressedFheBool CompressedFheBool;

typedef struct CompressedFheUint10 CompressedFheUint10;

typedef struct CompressedFheUint12 CompressedFheUint12;

typedef struct CompressedFheUint128 CompressedFheUint128;

typedef struct CompressedFheUint14 CompressedFheUint14;

typedef struct CompressedFheUint16 CompressedFheUint16;

typedef struct CompressedFheUint256 CompressedFheUint256;

typedef struct CompressedFheUint32 CompressedFheUint32;

typedef struct CompressedFheUint64 CompressedFheUint64;

typedef struct CompressedFheUint8 CompressedFheUint8;

typedef struct Config Config;

typedef struct ConfigBuilder ConfigBuilder;

typedef struct FheBool FheBool;

typedef struct FheUint10 FheUint10;

typedef struct FheUint12 FheUint12;

typedef struct FheUint128 FheUint128;

typedef struct FheUint14 FheUint14;

typedef struct FheUint16 FheUint16;

typedef struct FheUint256 FheUint256;

typedef struct FheUint32 FheUint32;

typedef struct FheUint64 FheUint64;

typedef struct FheUint8 FheUint8;

typedef struct PublicKey PublicKey;

typedef struct ServerKey ServerKey;

typedef struct ShortintBivariatePBSLookupTable ShortintBivariatePBSLookupTable;

typedef struct ShortintCiphertext ShortintCiphertext;

typedef struct ShortintClientKey ShortintClientKey;

typedef struct ShortintCompressedCiphertext ShortintCompressedCiphertext;

typedef struct ShortintCompressedPublicKey ShortintCompressedPublicKey;

typedef struct ShortintCompressedServerKey ShortintCompressedServerKey;

typedef struct ShortintPBSLookupTable ShortintPBSLookupTable;

typedef struct ShortintParameters ShortintParameters;

typedef struct ShortintPublicKey ShortintPublicKey;

typedef struct ShortintServerKey ShortintServerKey;

typedef struct U256 U256;

typedef struct BufferView {
  const uint8_t *pointer;
  size_t length;
} BufferView;

typedef struct Buffer {
  uint8_t *pointer;
  size_t length;
} Buffer;

typedef uint64_t (*BivariateLookupTableCallback)(uint64_t, uint64_t);

typedef uint64_t (*LookupTableCallback)(uint64_t);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

int boolean_client_key_decrypt(const struct BooleanClientKey *client_key,
                               const struct BooleanCiphertext *ciphertext_to_decrypt,
                               bool *result);

int boolean_client_key_encrypt(const struct BooleanClientKey *client_key,
                               bool value_to_encrypt,
                               struct BooleanCiphertext **result);

int boolean_client_key_encrypt_compressed(const struct BooleanClientKey *client_key,
                                          bool value_to_encrypt,
                                          struct BooleanCompressedCiphertext **result);

int boolean_create_parameters(size_t lwe_dimension,
                              size_t glwe_dimension,
                              size_t polynomial_size,
                              double lwe_modular_std_dev,
                              double glwe_modular_std_dev,
                              size_t pbs_base_log,
                              size_t pbs_level,
                              size_t ks_base_log,
                              size_t ks_level,
                              struct BooleanParameters **result_parameters);

int boolean_decompress_ciphertext(struct BooleanCompressedCiphertext *compressed_ciphertext,
                                  struct BooleanCiphertext **result);

int boolean_decompress_server_key(const struct BooleanCompressedServerKey *compressed_server_key,
                                  struct BooleanServerKey **result);

int boolean_deserialize_ciphertext(struct BufferView buffer_view,
                                   struct BooleanCiphertext **result);

int boolean_deserialize_client_key(struct BufferView buffer_view, struct BooleanClientKey **result);

int boolean_deserialize_compressed_ciphertext(struct BufferView buffer_view,
                                              struct BooleanCompressedCiphertext **result);

int boolean_deserialize_compressed_server_key(struct BufferView buffer_view,
                                              struct BooleanCompressedServerKey **result);

int boolean_deserialize_public_key(struct BufferView buffer_view, struct BooleanPublicKey **result);

int boolean_deserialize_server_key(struct BufferView buffer_view, struct BooleanServerKey **result);

int boolean_gen_client_key(const struct BooleanParameters *boolean_parameters,
                           struct BooleanClientKey **result_client_key);

int boolean_gen_compressed_server_key(const struct BooleanClientKey *client_key,
                                      struct BooleanCompressedServerKey **result_server_key);

int boolean_gen_keys_with_default_parameters(struct BooleanClientKey **result_client_key,
                                             struct BooleanServerKey **result_server_key);

int boolean_gen_keys_with_parameters(const struct BooleanParameters *boolean_parameters,
                                     struct BooleanClientKey **result_client_key,
                                     struct BooleanServerKey **result_server_key);

int boolean_gen_keys_with_predefined_parameters_set(int boolean_parameters_set,
                                                    struct BooleanClientKey **result_client_key,
                                                    struct BooleanServerKey **result_server_key);

int boolean_gen_public_key(const struct BooleanClientKey *client_key,
                           struct BooleanPublicKey **result);

int boolean_gen_server_key(const struct BooleanClientKey *client_key,
                           struct BooleanServerKey **result_server_key);

int boolean_get_parameters(int boolean_parameters_set, struct BooleanParameters **result);

int boolean_public_key_encrypt(const struct BooleanPublicKey *public_key,
                               bool value_to_encrypt,
                               struct BooleanCiphertext **result);

int boolean_serialize_ciphertext(const struct BooleanCiphertext *ciphertext, struct Buffer *result);

int boolean_serialize_client_key(const struct BooleanClientKey *client_key, struct Buffer *result);

int boolean_serialize_compressed_ciphertext(const struct BooleanCompressedCiphertext *ciphertext,
                                            struct Buffer *result);

int boolean_serialize_compressed_server_key(const struct BooleanCompressedServerKey *server_key,
                                            struct Buffer *result);

int boolean_serialize_public_key(const struct BooleanPublicKey *public_key, struct Buffer *result);

int boolean_serialize_server_key(const struct BooleanServerKey *server_key, struct Buffer *result);

int boolean_server_key_and(const struct BooleanServerKey *server_key,
                           const struct BooleanCiphertext *ct_left,
                           const struct BooleanCiphertext *ct_right,
                           struct BooleanCiphertext **result);

int boolean_server_key_and_assign(const struct BooleanServerKey *server_key,
                                  struct BooleanCiphertext *ct_left,
                                  const struct BooleanCiphertext *ct_right);

int boolean_server_key_and_scalar(const struct BooleanServerKey *server_key,
                                  const struct BooleanCiphertext *ct_left,
                                  bool scalar,
                                  struct BooleanCiphertext **result);

int boolean_server_key_and_scalar_assign(const struct BooleanServerKey *server_key,
                                         struct BooleanCiphertext *ct_left,
                                         bool scalar);

int boolean_server_key_mux(const struct BooleanServerKey *server_key,
                           const struct BooleanCiphertext *ct_condition,
                           const struct BooleanCiphertext *ct_then,
                           const struct BooleanCiphertext *ct_else,
                           struct BooleanCiphertext **result);

int boolean_server_key_nand(const struct BooleanServerKey *server_key,
                            const struct BooleanCiphertext *ct_left,
                            const struct BooleanCiphertext *ct_right,
                            struct BooleanCiphertext **result);

int boolean_server_key_nand_assign(const struct BooleanServerKey *server_key,
                                   struct BooleanCiphertext *ct_left,
                                   const struct BooleanCiphertext *ct_right);

int boolean_server_key_nand_scalar(const struct BooleanServerKey *server_key,
                                   const struct BooleanCiphertext *ct_left,
                                   bool scalar,
                                   struct BooleanCiphertext **result);

int boolean_server_key_nand_scalar_assign(const struct BooleanServerKey *server_key,
                                          struct BooleanCiphertext *ct_left,
                                          bool scalar);

int boolean_server_key_nor(const struct BooleanServerKey *server_key,
                           const struct BooleanCiphertext *ct_left,
                           const struct BooleanCiphertext *ct_right,
                           struct BooleanCiphertext **result);

int boolean_server_key_nor_assign(const struct BooleanServerKey *server_key,
                                  struct BooleanCiphertext *ct_left,
                                  const struct BooleanCiphertext *ct_right);

int boolean_server_key_nor_scalar(const struct BooleanServerKey *server_key,
                                  const struct BooleanCiphertext *ct_left,
                                  bool scalar,
                                  struct BooleanCiphertext **result);

int boolean_server_key_nor_scalar_assign(const struct BooleanServerKey *server_key,
                                         struct BooleanCiphertext *ct_left,
                                         bool scalar);

int boolean_server_key_not(const struct BooleanServerKey *server_key,
                           const struct BooleanCiphertext *ct_input,
                           struct BooleanCiphertext **result);

int boolean_server_key_not_assign(const struct BooleanServerKey *server_key,
                                  struct BooleanCiphertext *ct_input);

int boolean_server_key_or(const struct BooleanServerKey *server_key,
                          const struct BooleanCiphertext *ct_left,
                          const struct BooleanCiphertext *ct_right,
                          struct BooleanCiphertext **result);

int boolean_server_key_or_assign(const struct BooleanServerKey *server_key,
                                 struct BooleanCiphertext *ct_left,
                                 const struct BooleanCiphertext *ct_right);

int boolean_server_key_or_scalar(const struct BooleanServerKey *server_key,
                                 const struct BooleanCiphertext *ct_left,
                                 bool scalar,
                                 struct BooleanCiphertext **result);

int boolean_server_key_or_scalar_assign(const struct BooleanServerKey *server_key,
                                        struct BooleanCiphertext *ct_left,
                                        bool scalar);

int boolean_server_key_xnor(const struct BooleanServerKey *server_key,
                            const struct BooleanCiphertext *ct_left,
                            const struct BooleanCiphertext *ct_right,
                            struct BooleanCiphertext **result);

int boolean_server_key_xnor_assign(const struct BooleanServerKey *server_key,
                                   struct BooleanCiphertext *ct_left,
                                   const struct BooleanCiphertext *ct_right);

int boolean_server_key_xnor_scalar(const struct BooleanServerKey *server_key,
                                   const struct BooleanCiphertext *ct_left,
                                   bool scalar,
                                   struct BooleanCiphertext **result);

int boolean_server_key_xnor_scalar_assign(const struct BooleanServerKey *server_key,
                                          struct BooleanCiphertext *ct_left,
                                          bool scalar);

int boolean_server_key_xor(const struct BooleanServerKey *server_key,
                           const struct BooleanCiphertext *ct_left,
                           const struct BooleanCiphertext *ct_right,
                           struct BooleanCiphertext **result);

int boolean_server_key_xor_assign(const struct BooleanServerKey *server_key,
                                  struct BooleanCiphertext *ct_left,
                                  const struct BooleanCiphertext *ct_right);

int boolean_server_key_xor_scalar(const struct BooleanServerKey *server_key,
                                  const struct BooleanCiphertext *ct_left,
                                  bool scalar,
                                  struct BooleanCiphertext **result);

int boolean_server_key_xor_scalar_assign(const struct BooleanServerKey *server_key,
                                         struct BooleanCiphertext *ct_left,
                                         bool scalar);

int boolean_trivial_encrypt(bool message, struct BooleanCiphertext **result);

int client_key_deserialize(struct BufferView buffer_view, struct ClientKey **result);

int client_key_destroy(struct ClientKey *ptr);

int client_key_serialize(const struct ClientKey *sself, struct Buffer *result);

int compressed_fhe_bool_clone(const struct CompressedFheBool *sself,
                              struct CompressedFheBool **result);

int compressed_fhe_bool_decompress(const struct CompressedFheBool *sself, struct FheBool **result);

int compressed_fhe_bool_deserialize(struct BufferView buffer_view,
                                    struct CompressedFheBool **result);

int compressed_fhe_bool_destroy(struct CompressedFheBool *ptr);

int compressed_fhe_bool_serialize(const struct CompressedFheBool *sself, struct Buffer *result);

int compressed_fhe_uint10_clone(const struct CompressedFheUint10 *sself,
                                struct CompressedFheUint10 **result);

int compressed_fhe_uint10_decompress(const struct CompressedFheUint10 *sself,
                                     struct FheUint10 **result);

int compressed_fhe_uint10_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint10 **result);

int compressed_fhe_uint10_destroy(struct CompressedFheUint10 *ptr);

int compressed_fhe_uint10_serialize(const struct CompressedFheUint10 *sself, struct Buffer *result);

int compressed_fhe_uint10_try_encrypt_with_client_key_u16(uint16_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint10 **result);

int compressed_fhe_uint128_clone(const struct CompressedFheUint128 *sself,
                                 struct CompressedFheUint128 **result);

int compressed_fhe_uint128_decompress(const struct CompressedFheUint128 *sself,
                                      struct FheUint128 **result);

int compressed_fhe_uint128_deserialize(struct BufferView buffer_view,
                                       struct CompressedFheUint128 **result);

int compressed_fhe_uint128_destroy(struct CompressedFheUint128 *ptr);

int compressed_fhe_uint128_serialize(const struct CompressedFheUint128 *sself,
                                     struct Buffer *result);

int compressed_fhe_uint128_try_encrypt_with_client_key_u128(uint64_t low_word,
                                                            uint64_t high_word,
                                                            const struct ClientKey *client_key,
                                                            struct CompressedFheUint128 **result);

int compressed_fhe_uint12_clone(const struct CompressedFheUint12 *sself,
                                struct CompressedFheUint12 **result);

int compressed_fhe_uint12_decompress(const struct CompressedFheUint12 *sself,
                                     struct FheUint12 **result);

int compressed_fhe_uint12_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint12 **result);

int compressed_fhe_uint12_destroy(struct CompressedFheUint12 *ptr);

int compressed_fhe_uint12_serialize(const struct CompressedFheUint12 *sself, struct Buffer *result);

int compressed_fhe_uint12_try_encrypt_with_client_key_u16(uint16_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint12 **result);

int compressed_fhe_uint14_clone(const struct CompressedFheUint14 *sself,
                                struct CompressedFheUint14 **result);

int compressed_fhe_uint14_decompress(const struct CompressedFheUint14 *sself,
                                     struct FheUint14 **result);

int compressed_fhe_uint14_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint14 **result);

int compressed_fhe_uint14_destroy(struct CompressedFheUint14 *ptr);

int compressed_fhe_uint14_serialize(const struct CompressedFheUint14 *sself, struct Buffer *result);

int compressed_fhe_uint14_try_encrypt_with_client_key_u16(uint16_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint14 **result);

int compressed_fhe_uint16_clone(const struct CompressedFheUint16 *sself,
                                struct CompressedFheUint16 **result);

int compressed_fhe_uint16_decompress(const struct CompressedFheUint16 *sself,
                                     struct FheUint16 **result);

int compressed_fhe_uint16_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint16 **result);

int compressed_fhe_uint16_destroy(struct CompressedFheUint16 *ptr);

int compressed_fhe_uint16_serialize(const struct CompressedFheUint16 *sself, struct Buffer *result);

int compressed_fhe_uint16_try_encrypt_with_client_key_u16(uint16_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint16 **result);

int compressed_fhe_uint256_clone(const struct CompressedFheUint256 *sself,
                                 struct CompressedFheUint256 **result);

int compressed_fhe_uint256_decompress(const struct CompressedFheUint256 *sself,
                                      struct FheUint256 **result);

int compressed_fhe_uint256_deserialize(struct BufferView buffer_view,
                                       struct CompressedFheUint256 **result);

int compressed_fhe_uint256_destroy(struct CompressedFheUint256 *ptr);

int compressed_fhe_uint256_serialize(const struct CompressedFheUint256 *sself,
                                     struct Buffer *result);

int compressed_fhe_uint256_try_encrypt_with_client_key_u256(const struct U256 *value,
                                                            const struct ClientKey *client_key,
                                                            struct CompressedFheUint256 **result);

int compressed_fhe_uint32_clone(const struct CompressedFheUint32 *sself,
                                struct CompressedFheUint32 **result);

int compressed_fhe_uint32_decompress(const struct CompressedFheUint32 *sself,
                                     struct FheUint32 **result);

int compressed_fhe_uint32_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint32 **result);

int compressed_fhe_uint32_destroy(struct CompressedFheUint32 *ptr);

int compressed_fhe_uint32_serialize(const struct CompressedFheUint32 *sself, struct Buffer *result);

int compressed_fhe_uint32_try_encrypt_with_client_key_u32(uint32_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint32 **result);

int compressed_fhe_uint64_clone(const struct CompressedFheUint64 *sself,
                                struct CompressedFheUint64 **result);

int compressed_fhe_uint64_decompress(const struct CompressedFheUint64 *sself,
                                     struct FheUint64 **result);

int compressed_fhe_uint64_deserialize(struct BufferView buffer_view,
                                      struct CompressedFheUint64 **result);

int compressed_fhe_uint64_destroy(struct CompressedFheUint64 *ptr);

int compressed_fhe_uint64_serialize(const struct CompressedFheUint64 *sself, struct Buffer *result);

int compressed_fhe_uint64_try_encrypt_with_client_key_u64(uint64_t value,
                                                          const struct ClientKey *client_key,
                                                          struct CompressedFheUint64 **result);

int compressed_fhe_uint8_clone(const struct CompressedFheUint8 *sself,
                               struct CompressedFheUint8 **result);

int compressed_fhe_uint8_decompress(const struct CompressedFheUint8 *sself,
                                    struct FheUint8 **result);

int compressed_fhe_uint8_deserialize(struct BufferView buffer_view,
                                     struct CompressedFheUint8 **result);

int compressed_fhe_uint8_destroy(struct CompressedFheUint8 *ptr);

int compressed_fhe_uint8_serialize(const struct CompressedFheUint8 *sself, struct Buffer *result);

int compressed_fhe_uint8_try_encrypt_with_client_key_u8(uint8_t value,
                                                        const struct ClientKey *client_key,
                                                        struct CompressedFheUint8 **result);

int config_builder_all_disabled(struct ConfigBuilder **result);

int config_builder_build(struct ConfigBuilder *builder, struct Config **result);

int config_builder_clone(const struct ConfigBuilder *input, struct ConfigBuilder **result);

int config_builder_destroy(struct ConfigBuilder *ptr);

int config_builder_enable_default_bool(struct ConfigBuilder **builder);

int config_builder_enable_default_uint10(struct ConfigBuilder **builder);

int config_builder_enable_default_uint10_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint12(struct ConfigBuilder **builder);

int config_builder_enable_default_uint128(struct ConfigBuilder **builder);

int config_builder_enable_default_uint128_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint12_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint14(struct ConfigBuilder **builder);

int config_builder_enable_default_uint14_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint16(struct ConfigBuilder **builder);

int config_builder_enable_default_uint16_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint256(struct ConfigBuilder **builder);

int config_builder_enable_default_uint256_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint32(struct ConfigBuilder **builder);

int config_builder_enable_default_uint32_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint64(struct ConfigBuilder **builder);

int config_builder_enable_default_uint64_small(struct ConfigBuilder **builder);

int config_builder_enable_default_uint8(struct ConfigBuilder **builder);

int config_builder_enable_default_uint8_small(struct ConfigBuilder **builder);

int config_destroy(struct Config *ptr);

int destroy_boolean_ciphertext(struct BooleanCiphertext *boolean_ciphertext);

int destroy_boolean_client_key(struct BooleanClientKey *client_key);

int destroy_boolean_compressed_ciphertext(struct BooleanCompressedCiphertext *boolean_ciphertext);

int destroy_boolean_compressed_server_key(struct BooleanCompressedServerKey *server_key);

int destroy_boolean_parameters(struct BooleanParameters *boolean_parameters);

int destroy_boolean_public_key(struct BooleanPublicKey *public_key);

int destroy_boolean_server_key(struct BooleanServerKey *server_key);

int destroy_buffer(struct Buffer *buffer);

int destroy_buffer_unchecked(struct Buffer *buffer);

int destroy_shortint_bivariate_pbs_accumulator(struct ShortintBivariatePBSLookupTable *pbs_accumulator);

int destroy_shortint_ciphertext(struct ShortintCiphertext *shortint_ciphertext);

int destroy_shortint_client_key(struct ShortintClientKey *client_key);

int destroy_shortint_compressed_ciphertext(struct ShortintCompressedCiphertext *shortint_ciphertext);

int destroy_shortint_compressed_public_key(struct ShortintCompressedPublicKey *compressed_public_key);

int destroy_shortint_compressed_server_key(struct ShortintCompressedServerKey *server_key);

int destroy_shortint_parameters(struct ShortintParameters *shortint_parameters);

int destroy_shortint_pbs_accumulator(struct ShortintPBSLookupTable *pbs_accumulator);

int destroy_shortint_public_key(struct ShortintPublicKey *public_key);

int destroy_shortint_server_key(struct ShortintServerKey *server_key);

int fhe_bool_bitand(const struct FheBool *lhs, const struct FheBool *rhs, struct FheBool **result);

int fhe_bool_bitor(const struct FheBool *lhs, const struct FheBool *rhs, struct FheBool **result);

int fhe_bool_bitxor(const struct FheBool *lhs, const struct FheBool *rhs, struct FheBool **result);

int fhe_bool_clone(const struct FheBool *sself, struct FheBool **result);

int fhe_bool_decrypt(const struct FheBool *encrypted_value,
                     const struct ClientKey *client_key,
                     bool *result);

int fhe_bool_destroy(struct FheBool *ptr);

int fhe_bool_not(const struct FheBool *lhs, struct FheBool **result);

int fhe_bool_try_encrypt_with_client_key_bool(bool value,
                                              const struct ClientKey *client_key,
                                              struct FheBool **result);

int fhe_bool_try_encrypt_with_public_key_bool(bool value,
                                              const struct PublicKey *public_key,
                                              struct FheBool **result);

int fhe_uint10_add(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_add_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_bitand(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_bitand_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_bitor(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_bitor_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_bitxor(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_bitxor_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_clone(const struct FheUint10 *sself, struct FheUint10 **result);

int fhe_uint10_decrypt(const struct FheUint10 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint16_t *result);

int fhe_uint10_deserialize(struct BufferView buffer_view, struct FheUint10 **result);

int fhe_uint10_destroy(struct FheUint10 *ptr);

int fhe_uint10_eq(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_ge(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_gt(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_le(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_lt(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_max(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_min(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_mul(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_mul_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_neg(struct FheUint10 *lhs, struct FheUint10 **result);

int fhe_uint10_scalar_add(struct FheUint10 *lhs, uint16_t rhs, struct FheUint10 **result);

int fhe_uint10_scalar_add_assign(struct FheUint10 *lhs, uint16_t rhs);

int fhe_uint10_scalar_mul(struct FheUint10 *lhs, uint16_t rhs, struct FheUint10 **result);

int fhe_uint10_scalar_mul_assign(struct FheUint10 *lhs, uint16_t rhs);

int fhe_uint10_scalar_shl(struct FheUint10 *lhs, uint16_t rhs, struct FheUint10 **result);

int fhe_uint10_scalar_shl_assign(struct FheUint10 *lhs, uint16_t rhs);

int fhe_uint10_scalar_shr(struct FheUint10 *lhs, uint16_t rhs, struct FheUint10 **result);

int fhe_uint10_scalar_shr_assign(struct FheUint10 *lhs, uint16_t rhs);

int fhe_uint10_scalar_sub(struct FheUint10 *lhs, uint16_t rhs, struct FheUint10 **result);

int fhe_uint10_scalar_sub_assign(struct FheUint10 *lhs, uint16_t rhs);

int fhe_uint10_serialize(const struct FheUint10 *sself, struct Buffer *result);

int fhe_uint10_sub(struct FheUint10 *lhs, struct FheUint10 *rhs, struct FheUint10 **result);

int fhe_uint10_sub_assign(struct FheUint10 *lhs, struct FheUint10 *rhs);

int fhe_uint10_try_encrypt_with_client_key_u16(uint16_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint10 **result);

int fhe_uint10_try_encrypt_with_public_key_u16(uint16_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint10 **result);

int fhe_uint128_add(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_add_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_bitand(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_bitand_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_bitor(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_bitor_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_bitxor(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_bitxor_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_clone(const struct FheUint128 *sself, struct FheUint128 **result);

int fhe_uint128_decrypt(const struct FheUint128 *encrypted_value,
                        const struct ClientKey *client_key,
                        uint64_t *low_word,
                        uint64_t *high_word);

int fhe_uint128_deserialize(struct BufferView buffer_view, struct FheUint128 **result);

int fhe_uint128_destroy(struct FheUint128 *ptr);

int fhe_uint128_eq(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_ge(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_gt(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_le(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_lt(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_max(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_min(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_mul(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_mul_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_neg(struct FheUint128 *lhs, struct FheUint128 **result);

int fhe_uint128_scalar_add(struct FheUint128 *lhs, uint64_t rhs, struct FheUint128 **result);

int fhe_uint128_scalar_add_assign(struct FheUint128 *lhs, uint64_t rhs);

int fhe_uint128_scalar_mul(struct FheUint128 *lhs, uint64_t rhs, struct FheUint128 **result);

int fhe_uint128_scalar_mul_assign(struct FheUint128 *lhs, uint64_t rhs);

int fhe_uint128_scalar_shl(struct FheUint128 *lhs, uint64_t rhs, struct FheUint128 **result);

int fhe_uint128_scalar_shl_assign(struct FheUint128 *lhs, uint64_t rhs);

int fhe_uint128_scalar_shr(struct FheUint128 *lhs, uint64_t rhs, struct FheUint128 **result);

int fhe_uint128_scalar_shr_assign(struct FheUint128 *lhs, uint64_t rhs);

int fhe_uint128_scalar_sub(struct FheUint128 *lhs, uint64_t rhs, struct FheUint128 **result);

int fhe_uint128_scalar_sub_assign(struct FheUint128 *lhs, uint64_t rhs);

int fhe_uint128_serialize(const struct FheUint128 *sself, struct Buffer *result);

int fhe_uint128_sub(struct FheUint128 *lhs, struct FheUint128 *rhs, struct FheUint128 **result);

int fhe_uint128_sub_assign(struct FheUint128 *lhs, struct FheUint128 *rhs);

int fhe_uint128_try_encrypt_with_client_key_u128(uint64_t low_word,
                                                 uint64_t high_word,
                                                 const struct ClientKey *client_key,
                                                 struct FheUint128 **result);

int fhe_uint128_try_encrypt_with_public_key_u128(uint64_t low_word,
                                                 uint64_t high_word,
                                                 const struct PublicKey *public_key,
                                                 struct FheUint128 **result);

int fhe_uint12_add(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_add_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_bitand(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_bitand_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_bitor(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_bitor_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_bitxor(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_bitxor_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_clone(const struct FheUint12 *sself, struct FheUint12 **result);

int fhe_uint12_decrypt(const struct FheUint12 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint16_t *result);

int fhe_uint12_deserialize(struct BufferView buffer_view, struct FheUint12 **result);

int fhe_uint12_destroy(struct FheUint12 *ptr);

int fhe_uint12_eq(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_ge(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_gt(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_le(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_lt(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_max(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_min(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_mul(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_mul_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_neg(struct FheUint12 *lhs, struct FheUint12 **result);

int fhe_uint12_scalar_add(struct FheUint12 *lhs, uint16_t rhs, struct FheUint12 **result);

int fhe_uint12_scalar_add_assign(struct FheUint12 *lhs, uint16_t rhs);

int fhe_uint12_scalar_mul(struct FheUint12 *lhs, uint16_t rhs, struct FheUint12 **result);

int fhe_uint12_scalar_mul_assign(struct FheUint12 *lhs, uint16_t rhs);

int fhe_uint12_scalar_shl(struct FheUint12 *lhs, uint16_t rhs, struct FheUint12 **result);

int fhe_uint12_scalar_shl_assign(struct FheUint12 *lhs, uint16_t rhs);

int fhe_uint12_scalar_shr(struct FheUint12 *lhs, uint16_t rhs, struct FheUint12 **result);

int fhe_uint12_scalar_shr_assign(struct FheUint12 *lhs, uint16_t rhs);

int fhe_uint12_scalar_sub(struct FheUint12 *lhs, uint16_t rhs, struct FheUint12 **result);

int fhe_uint12_scalar_sub_assign(struct FheUint12 *lhs, uint16_t rhs);

int fhe_uint12_serialize(const struct FheUint12 *sself, struct Buffer *result);

int fhe_uint12_sub(struct FheUint12 *lhs, struct FheUint12 *rhs, struct FheUint12 **result);

int fhe_uint12_sub_assign(struct FheUint12 *lhs, struct FheUint12 *rhs);

int fhe_uint12_try_encrypt_with_client_key_u16(uint16_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint12 **result);

int fhe_uint12_try_encrypt_with_public_key_u16(uint16_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint12 **result);

int fhe_uint14_add(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_add_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_bitand(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_bitand_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_bitor(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_bitor_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_bitxor(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_bitxor_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_clone(const struct FheUint14 *sself, struct FheUint14 **result);

int fhe_uint14_decrypt(const struct FheUint14 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint16_t *result);

int fhe_uint14_deserialize(struct BufferView buffer_view, struct FheUint14 **result);

int fhe_uint14_destroy(struct FheUint14 *ptr);

int fhe_uint14_eq(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_ge(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_gt(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_le(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_lt(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_max(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_min(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_mul(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_mul_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_neg(struct FheUint14 *lhs, struct FheUint14 **result);

int fhe_uint14_scalar_add(struct FheUint14 *lhs, uint16_t rhs, struct FheUint14 **result);

int fhe_uint14_scalar_add_assign(struct FheUint14 *lhs, uint16_t rhs);

int fhe_uint14_scalar_mul(struct FheUint14 *lhs, uint16_t rhs, struct FheUint14 **result);

int fhe_uint14_scalar_mul_assign(struct FheUint14 *lhs, uint16_t rhs);

int fhe_uint14_scalar_shl(struct FheUint14 *lhs, uint16_t rhs, struct FheUint14 **result);

int fhe_uint14_scalar_shl_assign(struct FheUint14 *lhs, uint16_t rhs);

int fhe_uint14_scalar_shr(struct FheUint14 *lhs, uint16_t rhs, struct FheUint14 **result);

int fhe_uint14_scalar_shr_assign(struct FheUint14 *lhs, uint16_t rhs);

int fhe_uint14_scalar_sub(struct FheUint14 *lhs, uint16_t rhs, struct FheUint14 **result);

int fhe_uint14_scalar_sub_assign(struct FheUint14 *lhs, uint16_t rhs);

int fhe_uint14_serialize(const struct FheUint14 *sself, struct Buffer *result);

int fhe_uint14_sub(struct FheUint14 *lhs, struct FheUint14 *rhs, struct FheUint14 **result);

int fhe_uint14_sub_assign(struct FheUint14 *lhs, struct FheUint14 *rhs);

int fhe_uint14_try_encrypt_with_client_key_u16(uint16_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint14 **result);

int fhe_uint14_try_encrypt_with_public_key_u16(uint16_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint14 **result);

int fhe_uint16_add(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_add_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_bitand(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_bitand_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_bitor(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_bitor_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_bitxor(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_bitxor_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_clone(const struct FheUint16 *sself, struct FheUint16 **result);

int fhe_uint16_decrypt(const struct FheUint16 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint16_t *result);

int fhe_uint16_deserialize(struct BufferView buffer_view, struct FheUint16 **result);

int fhe_uint16_destroy(struct FheUint16 *ptr);

int fhe_uint16_eq(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_ge(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_gt(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_le(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_lt(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_max(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_min(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_mul(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_mul_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_neg(struct FheUint16 *lhs, struct FheUint16 **result);

int fhe_uint16_scalar_add(struct FheUint16 *lhs, uint16_t rhs, struct FheUint16 **result);

int fhe_uint16_scalar_add_assign(struct FheUint16 *lhs, uint16_t rhs);

int fhe_uint16_scalar_mul(struct FheUint16 *lhs, uint16_t rhs, struct FheUint16 **result);

int fhe_uint16_scalar_mul_assign(struct FheUint16 *lhs, uint16_t rhs);

int fhe_uint16_scalar_shl(struct FheUint16 *lhs, uint16_t rhs, struct FheUint16 **result);

int fhe_uint16_scalar_shl_assign(struct FheUint16 *lhs, uint16_t rhs);

int fhe_uint16_scalar_shr(struct FheUint16 *lhs, uint16_t rhs, struct FheUint16 **result);

int fhe_uint16_scalar_shr_assign(struct FheUint16 *lhs, uint16_t rhs);

int fhe_uint16_scalar_sub(struct FheUint16 *lhs, uint16_t rhs, struct FheUint16 **result);

int fhe_uint16_scalar_sub_assign(struct FheUint16 *lhs, uint16_t rhs);

int fhe_uint16_serialize(const struct FheUint16 *sself, struct Buffer *result);

int fhe_uint16_sub(struct FheUint16 *lhs, struct FheUint16 *rhs, struct FheUint16 **result);

int fhe_uint16_sub_assign(struct FheUint16 *lhs, struct FheUint16 *rhs);

int fhe_uint16_try_encrypt_with_client_key_u16(uint16_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint16 **result);

int fhe_uint16_try_encrypt_with_public_key_u16(uint16_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint16 **result);

int fhe_uint256_add(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_add_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_bitand(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_bitand_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_bitor(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_bitor_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_bitxor(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_bitxor_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_clone(const struct FheUint256 *sself, struct FheUint256 **result);

int fhe_uint256_decrypt(const struct FheUint256 *encrypted_value,
                        const struct ClientKey *client_key,
                        struct U256 **result);

int fhe_uint256_deserialize(struct BufferView buffer_view, struct FheUint256 **result);

int fhe_uint256_destroy(struct FheUint256 *ptr);

int fhe_uint256_eq(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_ge(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_gt(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_le(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_lt(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_max(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_min(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_mul(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_mul_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_neg(struct FheUint256 *lhs, struct FheUint256 **result);

int fhe_uint256_scalar_add(struct FheUint256 *lhs, uint64_t rhs, struct FheUint256 **result);

int fhe_uint256_scalar_add_assign(struct FheUint256 *lhs, uint64_t rhs);

int fhe_uint256_scalar_mul(struct FheUint256 *lhs, uint64_t rhs, struct FheUint256 **result);

int fhe_uint256_scalar_mul_assign(struct FheUint256 *lhs, uint64_t rhs);

int fhe_uint256_scalar_shl(struct FheUint256 *lhs, uint64_t rhs, struct FheUint256 **result);

int fhe_uint256_scalar_shl_assign(struct FheUint256 *lhs, uint64_t rhs);

int fhe_uint256_scalar_shr(struct FheUint256 *lhs, uint64_t rhs, struct FheUint256 **result);

int fhe_uint256_scalar_shr_assign(struct FheUint256 *lhs, uint64_t rhs);

int fhe_uint256_scalar_sub(struct FheUint256 *lhs, uint64_t rhs, struct FheUint256 **result);

int fhe_uint256_scalar_sub_assign(struct FheUint256 *lhs, uint64_t rhs);

int fhe_uint256_serialize(const struct FheUint256 *sself, struct Buffer *result);

int fhe_uint256_sub(struct FheUint256 *lhs, struct FheUint256 *rhs, struct FheUint256 **result);

int fhe_uint256_sub_assign(struct FheUint256 *lhs, struct FheUint256 *rhs);

int fhe_uint256_try_encrypt_with_client_key_u256(const struct U256 *value,
                                                 const struct ClientKey *client_key,
                                                 struct FheUint256 **result);

int fhe_uint256_try_encrypt_with_public_key_u256(const struct U256 *value,
                                                 const struct PublicKey *public_key,
                                                 struct FheUint256 **result);

int fhe_uint32_add(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_add_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_bitand(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_bitand_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_bitor(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_bitor_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_bitxor(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_bitxor_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_clone(const struct FheUint32 *sself, struct FheUint32 **result);

int fhe_uint32_decrypt(const struct FheUint32 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint32_t *result);

int fhe_uint32_deserialize(struct BufferView buffer_view, struct FheUint32 **result);

int fhe_uint32_destroy(struct FheUint32 *ptr);

int fhe_uint32_eq(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_ge(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_gt(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_le(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_lt(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_max(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_min(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_mul(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_mul_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_neg(struct FheUint32 *lhs, struct FheUint32 **result);

int fhe_uint32_scalar_add(struct FheUint32 *lhs, uint32_t rhs, struct FheUint32 **result);

int fhe_uint32_scalar_add_assign(struct FheUint32 *lhs, uint32_t rhs);

int fhe_uint32_scalar_mul(struct FheUint32 *lhs, uint32_t rhs, struct FheUint32 **result);

int fhe_uint32_scalar_mul_assign(struct FheUint32 *lhs, uint32_t rhs);

int fhe_uint32_scalar_shl(struct FheUint32 *lhs, uint32_t rhs, struct FheUint32 **result);

int fhe_uint32_scalar_shl_assign(struct FheUint32 *lhs, uint32_t rhs);

int fhe_uint32_scalar_shr(struct FheUint32 *lhs, uint32_t rhs, struct FheUint32 **result);

int fhe_uint32_scalar_shr_assign(struct FheUint32 *lhs, uint32_t rhs);

int fhe_uint32_scalar_sub(struct FheUint32 *lhs, uint32_t rhs, struct FheUint32 **result);

int fhe_uint32_scalar_sub_assign(struct FheUint32 *lhs, uint32_t rhs);

int fhe_uint32_serialize(const struct FheUint32 *sself, struct Buffer *result);

int fhe_uint32_sub(struct FheUint32 *lhs, struct FheUint32 *rhs, struct FheUint32 **result);

int fhe_uint32_sub_assign(struct FheUint32 *lhs, struct FheUint32 *rhs);

int fhe_uint32_try_encrypt_with_client_key_u32(uint32_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint32 **result);

int fhe_uint32_try_encrypt_with_public_key_u32(uint32_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint32 **result);

int fhe_uint64_add(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_add_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_bitand(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_bitand_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_bitor(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_bitor_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_bitxor(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_bitxor_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_clone(const struct FheUint64 *sself, struct FheUint64 **result);

int fhe_uint64_decrypt(const struct FheUint64 *encrypted_value,
                       const struct ClientKey *client_key,
                       uint64_t *result);

int fhe_uint64_deserialize(struct BufferView buffer_view, struct FheUint64 **result);

int fhe_uint64_destroy(struct FheUint64 *ptr);

int fhe_uint64_eq(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_ge(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_gt(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_le(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_lt(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_max(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_min(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_mul(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_mul_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_neg(struct FheUint64 *lhs, struct FheUint64 **result);

int fhe_uint64_scalar_add(struct FheUint64 *lhs, uint64_t rhs, struct FheUint64 **result);

int fhe_uint64_scalar_add_assign(struct FheUint64 *lhs, uint64_t rhs);

int fhe_uint64_scalar_mul(struct FheUint64 *lhs, uint64_t rhs, struct FheUint64 **result);

int fhe_uint64_scalar_mul_assign(struct FheUint64 *lhs, uint64_t rhs);

int fhe_uint64_scalar_shl(struct FheUint64 *lhs, uint64_t rhs, struct FheUint64 **result);

int fhe_uint64_scalar_shl_assign(struct FheUint64 *lhs, uint64_t rhs);

int fhe_uint64_scalar_shr(struct FheUint64 *lhs, uint64_t rhs, struct FheUint64 **result);

int fhe_uint64_scalar_shr_assign(struct FheUint64 *lhs, uint64_t rhs);

int fhe_uint64_scalar_sub(struct FheUint64 *lhs, uint64_t rhs, struct FheUint64 **result);

int fhe_uint64_scalar_sub_assign(struct FheUint64 *lhs, uint64_t rhs);

int fhe_uint64_serialize(const struct FheUint64 *sself, struct Buffer *result);

int fhe_uint64_sub(struct FheUint64 *lhs, struct FheUint64 *rhs, struct FheUint64 **result);

int fhe_uint64_sub_assign(struct FheUint64 *lhs, struct FheUint64 *rhs);

int fhe_uint64_try_encrypt_with_client_key_u64(uint64_t value,
                                               const struct ClientKey *client_key,
                                               struct FheUint64 **result);

int fhe_uint64_try_encrypt_with_public_key_u64(uint64_t value,
                                               const struct PublicKey *public_key,
                                               struct FheUint64 **result);

int fhe_uint8_add(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_add_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_bitand(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_bitand_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_bitor(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_bitor_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_bitxor(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_bitxor_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_clone(const struct FheUint8 *sself, struct FheUint8 **result);

int fhe_uint8_decrypt(const struct FheUint8 *encrypted_value,
                      const struct ClientKey *client_key,
                      uint8_t *result);

int fhe_uint8_deserialize(struct BufferView buffer_view, struct FheUint8 **result);

int fhe_uint8_destroy(struct FheUint8 *ptr);

int fhe_uint8_eq(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_ge(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_gt(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_le(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_lt(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_max(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_min(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_mul(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_mul_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_neg(struct FheUint8 *lhs, struct FheUint8 **result);

int fhe_uint8_scalar_add(struct FheUint8 *lhs, uint8_t rhs, struct FheUint8 **result);

int fhe_uint8_scalar_add_assign(struct FheUint8 *lhs, uint8_t rhs);

int fhe_uint8_scalar_mul(struct FheUint8 *lhs, uint8_t rhs, struct FheUint8 **result);

int fhe_uint8_scalar_mul_assign(struct FheUint8 *lhs, uint8_t rhs);

int fhe_uint8_scalar_shl(struct FheUint8 *lhs, uint8_t rhs, struct FheUint8 **result);

int fhe_uint8_scalar_shl_assign(struct FheUint8 *lhs, uint8_t rhs);

int fhe_uint8_scalar_shr(struct FheUint8 *lhs, uint8_t rhs, struct FheUint8 **result);

int fhe_uint8_scalar_shr_assign(struct FheUint8 *lhs, uint8_t rhs);

int fhe_uint8_scalar_sub(struct FheUint8 *lhs, uint8_t rhs, struct FheUint8 **result);

int fhe_uint8_scalar_sub_assign(struct FheUint8 *lhs, uint8_t rhs);

int fhe_uint8_serialize(const struct FheUint8 *sself, struct Buffer *result);

int fhe_uint8_sub(struct FheUint8 *lhs, struct FheUint8 *rhs, struct FheUint8 **result);

int fhe_uint8_sub_assign(struct FheUint8 *lhs, struct FheUint8 *rhs);

int fhe_uint8_try_encrypt_with_client_key_u8(uint8_t value,
                                             const struct ClientKey *client_key,
                                             struct FheUint8 **result);

int fhe_uint8_try_encrypt_with_public_key_u8(uint8_t value,
                                             const struct PublicKey *public_key,
                                             struct FheUint8 **result);

int generate_keys(struct Config *config,
                  struct ClientKey **result_client_key,
                  struct ServerKey **result_server_key);

int public_key_deserialize(struct BufferView buffer_view, struct PublicKey **result);

int public_key_destroy(struct PublicKey *ptr);

int public_key_new(const struct ClientKey *client_key, struct PublicKey **result_public_key);

int public_key_serialize(const struct PublicKey *sself, struct Buffer *result);

int server_key_deserialize(struct BufferView buffer_view, struct ServerKey **result);

int server_key_destroy(struct ServerKey *ptr);

int server_key_serialize(const struct ServerKey *sself, struct Buffer *result);

int set_server_key(const struct ServerKey *server_key);

int shortint_ciphertext_get_degree(const struct ShortintCiphertext *ciphertext, size_t *result);

int shortint_ciphertext_set_degree(struct ShortintCiphertext *ciphertext, size_t degree);

int shortint_client_key_decrypt(const struct ShortintClientKey *client_key,
                                const struct ShortintCiphertext *ciphertext_to_decrypt,
                                uint64_t *result);

int shortint_client_key_encrypt(const struct ShortintClientKey *client_key,
                                uint64_t value_to_encrypt,
                                struct ShortintCiphertext **result);

int shortint_client_key_encrypt_compressed(const struct ShortintClientKey *client_key,
                                           uint64_t value_to_encrypt,
                                           struct ShortintCompressedCiphertext **result);

int shortint_client_key_encrypt_compressed_small(const struct ShortintClientKey *client_key,
                                                 uint64_t value_to_encrypt,
                                                 struct ShortintCompressedCiphertext **result);

int shortint_client_key_encrypt_small(const struct ShortintClientKey *client_key,
                                      uint64_t value_to_encrypt,
                                      struct ShortintCiphertext **result);

int shortint_compressed_public_key_encrypt(const struct ShortintCompressedPublicKey *compressed_public_key,
                                           uint64_t value_to_encrypt,
                                           struct ShortintCiphertext **result);

int shortint_create_parameters(size_t lwe_dimension,
                               size_t glwe_dimension,
                               size_t polynomial_size,
                               double lwe_modular_std_dev,
                               double glwe_modular_std_dev,
                               size_t pbs_base_log,
                               size_t pbs_level,
                               size_t ks_base_log,
                               size_t ks_level,
                               size_t pfks_level,
                               size_t pfks_base_log,
                               double pfks_modular_std_dev,
                               size_t cbs_level,
                               size_t cbs_base_log,
                               size_t message_modulus,
                               size_t carry_modulus,
                               size_t modulus_power_of_2_exponent,
                               struct ShortintParameters **result);

int shortint_decompress_ciphertext(const struct ShortintCompressedCiphertext *compressed_ciphertext,
                                   struct ShortintCiphertext **result);

int shortint_decompress_public_key(const struct ShortintCompressedPublicKey *compressed_public_key,
                                   struct ShortintPublicKey **result);

int shortint_decompress_server_key(const struct ShortintCompressedServerKey *compressed_server_key,
                                   struct ShortintServerKey **result);

int shortint_deserialize_ciphertext(struct BufferView buffer_view,
                                    struct ShortintCiphertext **result);

int shortint_deserialize_client_key(struct BufferView buffer_view,
                                    struct ShortintClientKey **result);

int shortint_deserialize_compressed_ciphertext(struct BufferView buffer_view,
                                               struct ShortintCompressedCiphertext **result);

int shortint_deserialize_compressed_public_key(struct BufferView buffer_view,
                                               struct ShortintCompressedPublicKey **result);

int shortint_deserialize_compressed_server_key(struct BufferView buffer_view,
                                               struct ShortintCompressedServerKey **result);

int shortint_deserialize_public_key(struct BufferView buffer_view,
                                    struct ShortintPublicKey **result);

int shortint_deserialize_server_key(struct BufferView buffer_view,
                                    struct ShortintServerKey **result);

int shortint_gen_client_key(const struct ShortintParameters *shortint_parameters,
                            struct ShortintClientKey **result_client_key);

int shortint_gen_compressed_public_key(const struct ShortintClientKey *client_key,
                                       enum ShortintPublicKeyKind public_key_kind,
                                       struct ShortintCompressedPublicKey **result);

int shortint_gen_compressed_server_key(const struct ShortintClientKey *client_key,
                                       struct ShortintCompressedServerKey **result_server_key);

int shortint_gen_keys_with_parameters(const struct ShortintParameters *shortint_parameters,
                                      struct ShortintClientKey **result_client_key,
                                      struct ShortintServerKey **result_server_key);

int shortint_gen_public_key(const struct ShortintClientKey *client_key,
                            enum ShortintPublicKeyKind public_key_kind,
                            struct ShortintPublicKey **result);

int shortint_gen_server_key(const struct ShortintClientKey *client_key,
                            struct ShortintServerKey **result_server_key);

int shortint_get_parameters(uint32_t message_bits,
                            uint32_t carry_bits,
                            struct ShortintParameters **result);

int shortint_get_parameters_small(uint32_t message_bits,
                                  uint32_t carry_bits,
                                  struct ShortintParameters **result);

int shortint_public_key_encrypt(const struct ShortintPublicKey *public_key,
                                uint64_t value_to_encrypt,
                                struct ShortintCiphertext **result);

int shortint_serialize_ciphertext(const struct ShortintCiphertext *ciphertext,
                                  struct Buffer *result);

int shortint_serialize_client_key(const struct ShortintClientKey *client_key,
                                  struct Buffer *result);

int shortint_serialize_compressed_ciphertext(const struct ShortintCompressedCiphertext *ciphertext,
                                             struct Buffer *result);

int shortint_serialize_compressed_public_key(const struct ShortintCompressedPublicKey *compressed_public_key,
                                             struct Buffer *result);

int shortint_serialize_compressed_server_key(const struct ShortintCompressedServerKey *server_key,
                                             struct Buffer *result);

int shortint_serialize_public_key(const struct ShortintPublicKey *public_key,
                                  struct Buffer *result);

int shortint_serialize_server_key(const struct ShortintServerKey *server_key,
                                  struct Buffer *result);

int shortint_server_key_bivariate_programmable_bootstrap(const struct ShortintServerKey *server_key,
                                                         const struct ShortintBivariatePBSLookupTable *accumulator,
                                                         const struct ShortintCiphertext *ct_left,
                                                         struct ShortintCiphertext *ct_right,
                                                         struct ShortintCiphertext **result);

int shortint_server_key_bivariate_programmable_bootstrap_assign(const struct ShortintServerKey *server_key,
                                                                const struct ShortintBivariatePBSLookupTable *accumulator,
                                                                struct ShortintCiphertext *ct_left_and_result,
                                                                struct ShortintCiphertext *ct_right);

int shortint_server_key_create_trivial(const struct ShortintServerKey *server_key,
                                       uint64_t value_to_trivially_encrypt,
                                       enum ShortintCiphertextKind ciphertext_kind,
                                       struct ShortintCiphertext **result);

int shortint_server_key_generate_bivariate_pbs_accumulator(const struct ShortintServerKey *server_key,
                                                           BivariateLookupTableCallback accumulator_callback,
                                                           struct ShortintBivariatePBSLookupTable **result);

int shortint_server_key_generate_pbs_accumulator(const struct ShortintServerKey *server_key,
                                                 LookupTableCallback accumulator_callback,
                                                 struct ShortintPBSLookupTable **result);

int shortint_server_key_programmable_bootstrap(const struct ShortintServerKey *server_key,
                                               const struct ShortintPBSLookupTable *accumulator,
                                               const struct ShortintCiphertext *ct_in,
                                               struct ShortintCiphertext **result);

int shortint_server_key_programmable_bootstrap_assign(const struct ShortintServerKey *server_key,
                                                      const struct ShortintPBSLookupTable *accumulator,
                                                      struct ShortintCiphertext *ct_in_and_result);

int shortint_server_key_smart_add(const struct ShortintServerKey *server_key,
                                  struct ShortintCiphertext *ct_left,
                                  struct ShortintCiphertext *ct_right,
                                  struct ShortintCiphertext **result);

int shortint_server_key_smart_add_assign(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left_and_result,
                                         struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_bitand(const struct ShortintServerKey *server_key,
                                     struct ShortintCiphertext *ct_left,
                                     struct ShortintCiphertext *ct_right,
                                     struct ShortintCiphertext **result);

int shortint_server_key_smart_bitand_assign(const struct ShortintServerKey *server_key,
                                            struct ShortintCiphertext *ct_left_and_result,
                                            struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_bitor(const struct ShortintServerKey *server_key,
                                    struct ShortintCiphertext *ct_left,
                                    struct ShortintCiphertext *ct_right,
                                    struct ShortintCiphertext **result);

int shortint_server_key_smart_bitor_assign(const struct ShortintServerKey *server_key,
                                           struct ShortintCiphertext *ct_left_and_result,
                                           struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_bitxor(const struct ShortintServerKey *server_key,
                                     struct ShortintCiphertext *ct_left,
                                     struct ShortintCiphertext *ct_right,
                                     struct ShortintCiphertext **result);

int shortint_server_key_smart_bitxor_assign(const struct ShortintServerKey *server_key,
                                            struct ShortintCiphertext *ct_left_and_result,
                                            struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_div(const struct ShortintServerKey *server_key,
                                  struct ShortintCiphertext *ct_left,
                                  struct ShortintCiphertext *ct_right,
                                  struct ShortintCiphertext **result);

int shortint_server_key_smart_div_assign(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left_and_result,
                                         struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_equal(const struct ShortintServerKey *server_key,
                                    struct ShortintCiphertext *ct_left,
                                    struct ShortintCiphertext *ct_right,
                                    struct ShortintCiphertext **result);

int shortint_server_key_smart_greater(const struct ShortintServerKey *server_key,
                                      struct ShortintCiphertext *ct_left,
                                      struct ShortintCiphertext *ct_right,
                                      struct ShortintCiphertext **result);

int shortint_server_key_smart_greater_or_equal(const struct ShortintServerKey *server_key,
                                               struct ShortintCiphertext *ct_left,
                                               struct ShortintCiphertext *ct_right,
                                               struct ShortintCiphertext **result);

int shortint_server_key_smart_less(const struct ShortintServerKey *server_key,
                                   struct ShortintCiphertext *ct_left,
                                   struct ShortintCiphertext *ct_right,
                                   struct ShortintCiphertext **result);

int shortint_server_key_smart_less_or_equal(const struct ShortintServerKey *server_key,
                                            struct ShortintCiphertext *ct_left,
                                            struct ShortintCiphertext *ct_right,
                                            struct ShortintCiphertext **result);

int shortint_server_key_smart_mul(const struct ShortintServerKey *server_key,
                                  struct ShortintCiphertext *ct_left,
                                  struct ShortintCiphertext *ct_right,
                                  struct ShortintCiphertext **result);

int shortint_server_key_smart_mul_assign(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left_and_result,
                                         struct ShortintCiphertext *ct_right);

int shortint_server_key_smart_neg(const struct ShortintServerKey *server_key,
                                  struct ShortintCiphertext *ct_left,
                                  struct ShortintCiphertext **result);

int shortint_server_key_smart_neg_assign(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left_and_result);

int shortint_server_key_smart_not_equal(const struct ShortintServerKey *server_key,
                                        struct ShortintCiphertext *ct_left,
                                        struct ShortintCiphertext *ct_right,
                                        struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_add(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left,
                                         uint8_t scalar_right,
                                         struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_add_assign(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct_left_and_result,
                                                uint8_t scalar_right);

int shortint_server_key_smart_scalar_equal(const struct ShortintServerKey *server_key,
                                           const struct ShortintCiphertext *ct_left,
                                           uint8_t right,
                                           struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_greater(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_greater_or_equal(const struct ShortintServerKey *server_key,
                                                      const struct ShortintCiphertext *ct_left,
                                                      uint8_t right,
                                                      struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_left_shift(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct,
                                                uint8_t shift,
                                                struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_left_shift_assign(const struct ShortintServerKey *server_key,
                                                       struct ShortintCiphertext *ct,
                                                       uint8_t shift);

int shortint_server_key_smart_scalar_less(const struct ShortintServerKey *server_key,
                                          const struct ShortintCiphertext *ct_left,
                                          uint8_t right,
                                          struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_less_or_equal(const struct ShortintServerKey *server_key,
                                                   const struct ShortintCiphertext *ct_left,
                                                   uint8_t right,
                                                   struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_mul(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left,
                                         uint8_t scalar_right,
                                         struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_mul_assign(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct_left_and_result,
                                                uint8_t scalar_right);

int shortint_server_key_smart_scalar_not_equal(const struct ShortintServerKey *server_key,
                                               const struct ShortintCiphertext *ct_left,
                                               uint8_t right,
                                               struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_right_shift(const struct ShortintServerKey *server_key,
                                                 struct ShortintCiphertext *ct,
                                                 uint8_t shift,
                                                 struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_right_shift_assign(const struct ShortintServerKey *server_key,
                                                        struct ShortintCiphertext *ct,
                                                        uint8_t shift);

int shortint_server_key_smart_scalar_sub(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left,
                                         uint8_t scalar_right,
                                         struct ShortintCiphertext **result);

int shortint_server_key_smart_scalar_sub_assign(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct_left_and_result,
                                                uint8_t scalar_right);

int shortint_server_key_smart_sub(const struct ShortintServerKey *server_key,
                                  struct ShortintCiphertext *ct_left,
                                  struct ShortintCiphertext *ct_right,
                                  struct ShortintCiphertext **result);

int shortint_server_key_smart_sub_assign(const struct ShortintServerKey *server_key,
                                         struct ShortintCiphertext *ct_left_and_result,
                                         struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_add(const struct ShortintServerKey *server_key,
                                      const struct ShortintCiphertext *ct_left,
                                      const struct ShortintCiphertext *ct_right,
                                      struct ShortintCiphertext **result);

int shortint_server_key_unchecked_add_assign(const struct ShortintServerKey *server_key,
                                             struct ShortintCiphertext *ct_left_and_result,
                                             const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_bitand(const struct ShortintServerKey *server_key,
                                         const struct ShortintCiphertext *ct_left,
                                         const struct ShortintCiphertext *ct_right,
                                         struct ShortintCiphertext **result);

int shortint_server_key_unchecked_bitand_assign(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct_left_and_result,
                                                const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_bitor(const struct ShortintServerKey *server_key,
                                        const struct ShortintCiphertext *ct_left,
                                        const struct ShortintCiphertext *ct_right,
                                        struct ShortintCiphertext **result);

int shortint_server_key_unchecked_bitor_assign(const struct ShortintServerKey *server_key,
                                               struct ShortintCiphertext *ct_left_and_result,
                                               const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_bitxor(const struct ShortintServerKey *server_key,
                                         const struct ShortintCiphertext *ct_left,
                                         const struct ShortintCiphertext *ct_right,
                                         struct ShortintCiphertext **result);

int shortint_server_key_unchecked_bitxor_assign(const struct ShortintServerKey *server_key,
                                                struct ShortintCiphertext *ct_left_and_result,
                                                const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_div(const struct ShortintServerKey *server_key,
                                      const struct ShortintCiphertext *ct_left,
                                      const struct ShortintCiphertext *ct_right,
                                      struct ShortintCiphertext **result);

int shortint_server_key_unchecked_div_assign(const struct ShortintServerKey *server_key,
                                             struct ShortintCiphertext *ct_left_and_result,
                                             const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_equal(const struct ShortintServerKey *server_key,
                                        const struct ShortintCiphertext *ct_left,
                                        const struct ShortintCiphertext *ct_right,
                                        struct ShortintCiphertext **result);

int shortint_server_key_unchecked_greater(const struct ShortintServerKey *server_key,
                                          const struct ShortintCiphertext *ct_left,
                                          const struct ShortintCiphertext *ct_right,
                                          struct ShortintCiphertext **result);

int shortint_server_key_unchecked_greater_or_equal(const struct ShortintServerKey *server_key,
                                                   const struct ShortintCiphertext *ct_left,
                                                   const struct ShortintCiphertext *ct_right,
                                                   struct ShortintCiphertext **result);

int shortint_server_key_unchecked_less(const struct ShortintServerKey *server_key,
                                       const struct ShortintCiphertext *ct_left,
                                       const struct ShortintCiphertext *ct_right,
                                       struct ShortintCiphertext **result);

int shortint_server_key_unchecked_less_or_equal(const struct ShortintServerKey *server_key,
                                                const struct ShortintCiphertext *ct_left,
                                                const struct ShortintCiphertext *ct_right,
                                                struct ShortintCiphertext **result);

int shortint_server_key_unchecked_mul(const struct ShortintServerKey *server_key,
                                      const struct ShortintCiphertext *ct_left,
                                      const struct ShortintCiphertext *ct_right,
                                      struct ShortintCiphertext **result);

int shortint_server_key_unchecked_mul_assign(const struct ShortintServerKey *server_key,
                                             struct ShortintCiphertext *ct_left_and_result,
                                             const struct ShortintCiphertext *ct_right);

int shortint_server_key_unchecked_neg(const struct ShortintServerKey *server_key,
                                      const struct ShortintCiphertext *ct_left,
                                      struct ShortintCiphertext **result);

int shortint_server_key_unchecked_neg_assign(const struct ShortintServerKey *server_key,
                                             struct ShortintCiphertext *ct_left_and_result);

int shortint_server_key_unchecked_not_equal(const struct ShortintServerKey *server_key,
                                            const struct ShortintCiphertext *ct_left,
                                            const struct ShortintCiphertext *ct_right,
                                            struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_add(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t scalar_right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_add_assign(const struct ShortintServerKey *server_key,
                                                    struct ShortintCiphertext *ct_left_and_result,
                                                    uint8_t scalar_right);

int shortint_server_key_unchecked_scalar_div(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_div_assign(const struct ShortintServerKey *server_key,
                                                    struct ShortintCiphertext *ct_left_and_result,
                                                    uint8_t right);

int shortint_server_key_unchecked_scalar_left_shift(const struct ShortintServerKey *server_key,
                                                    const struct ShortintCiphertext *ct,
                                                    uint8_t shift,
                                                    struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_left_shift_assign(const struct ShortintServerKey *server_key,
                                                           struct ShortintCiphertext *ct,
                                                           uint8_t shift);

int shortint_server_key_unchecked_scalar_mod(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_mod_assign(const struct ShortintServerKey *server_key,
                                                    struct ShortintCiphertext *ct_left_and_result,
                                                    uint8_t right);

int shortint_server_key_unchecked_scalar_mul(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t scalar_right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_mul_assign(const struct ShortintServerKey *server_key,
                                                    struct ShortintCiphertext *ct_left_and_result,
                                                    uint8_t scalar_right);

int shortint_server_key_unchecked_scalar_right_shift(const struct ShortintServerKey *server_key,
                                                     const struct ShortintCiphertext *ct,
                                                     uint8_t shift,
                                                     struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_right_shift_assign(const struct ShortintServerKey *server_key,
                                                            struct ShortintCiphertext *ct,
                                                            uint8_t shift);

int shortint_server_key_unchecked_scalar_sub(const struct ShortintServerKey *server_key,
                                             const struct ShortintCiphertext *ct_left,
                                             uint8_t scalar_right,
                                             struct ShortintCiphertext **result);

int shortint_server_key_unchecked_scalar_sub_assign(const struct ShortintServerKey *server_key,
                                                    struct ShortintCiphertext *ct_left_and_result,
                                                    uint8_t scalar_right);

int shortint_server_key_unchecked_sub(const struct ShortintServerKey *server_key,
                                      const struct ShortintCiphertext *ct_left,
                                      const struct ShortintCiphertext *ct_right,
                                      struct ShortintCiphertext **result);

int shortint_server_key_unchecked_sub_assign(const struct ShortintServerKey *server_key,
                                             struct ShortintCiphertext *ct_left_and_result,
                                             const struct ShortintCiphertext *ct_right);

int u256_big_endian_bytes(const struct U256 *input, uint8_t *result, size_t len);

int u256_destroy(struct U256 *ptr);

int u256_from_big_endian_bytes(const uint8_t *input, size_t len, struct U256 **result);

int u256_from_little_endian_bytes(const uint8_t *input, size_t len, struct U256 **result);

int u256_from_u64_words(uint64_t w0, uint64_t w1, uint64_t w2, uint64_t w3, struct U256 **result);

int u256_little_endian_bytes(const struct U256 *input, uint8_t *result, size_t len);

int u256_to_u64_words(const struct U256 *input,
                      uint64_t *w0,
                      uint64_t *w1,
                      uint64_t *w2,
                      uint64_t *w3);

int unset_server_key(struct ServerKey **result);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* TFHE_RS_C_API_H */
